# Makefile pour l'automatisation des t√¢ches de design
# Usage: make <command>

.PHONY: help design-backup design-deploy design-rollback design-validate

# Variables
PROJECT_ROOT := /Users/john/taxe
SCRIPTS_DIR := $(PROJECT_ROOT)/scripts
TIMESTAMP := $(shell date +"%Y%m%d_%H%M%S")

# Couleurs pour l'affichage
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m

help: ## Afficher l'aide
	@echo "üé® Commandes disponibles pour les patches de design:"
	@echo "=================================================="
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}'

design-backup: ## Cr√©er une sauvegarde des fichiers de design
	@echo "$(YELLOW)üìÅ Cr√©ation d'une sauvegarde...$(NC)"
	@cd $(SCRIPTS_DIR) && ./auto_deploy.sh --backup
	@echo "$(GREEN)‚úÖ Sauvegarde cr√©√©e avec succ√®s$(NC)"

design-deploy: ## D√©ployer tous les patches de design
	@echo "$(YELLOW)üöÄ D√©ploiement des patches de design...$(NC)"
	@cd $(SCRIPTS_DIR) && ./auto_deploy.sh
	@echo "$(GREEN)‚úÖ Patches d√©ploy√©s avec succ√®s$(NC)"

design-rollback: ## Restaurer depuis une sauvegarde (usage: make design-rollback BACKUP=20241201_143022)
	@if [ -z "$(BACKUP)" ]; then \
		echo "$(RED)‚ùå Veuillez sp√©cifier un timestamp de sauvegarde$(NC)"; \
		echo "Usage: make design-rollback BACKUP=20241201_143022"; \
		echo "Sauvegardes disponibles:"; \
		ls -la $(PROJECT_ROOT)/backups/ 2>/dev/null || echo "Aucune sauvegarde trouv√©e"; \
		exit 1; \
	fi
	@echo "$(YELLOW)üîÑ Restauration depuis la sauvegarde $(BACKUP)...$(NC)"
	@cd $(SCRIPTS_DIR) && ./auto_deploy.sh --rollback $(BACKUP)
	@echo "$(GREEN)‚úÖ Restauration termin√©e$(NC)"

design-validate: ## Valider les fichiers de design actuels
	@echo "$(YELLOW)üîç Validation des fichiers de design...$(NC)"
	@python3 $(SCRIPTS_DIR)/apply_design_patches.py --validate-only 2>/dev/null || echo "$(RED)‚ùå Erreurs de validation d√©tect√©es$(NC)"
	@echo "$(GREEN)‚úÖ Validation termin√©e$(NC)"

design-status: ## Afficher le statut des sauvegardes
	@echo "$(YELLOW)üìä Statut des sauvegardes de design:$(NC)"
	@echo "Dossier de sauvegarde: $(PROJECT_ROOT)/backups/"
	@if [ -d "$(PROJECT_ROOT)/backups" ]; then \
		echo "Sauvegardes disponibles:"; \
		ls -la $(PROJECT_ROOT)/backups/ | grep design_backup || echo "Aucune sauvegarde de design trouv√©e"; \
	else \
		echo "$(RED)‚ùå Dossier de sauvegarde non trouv√©$(NC)"; \
	fi

design-clean: ## Nettoyer les anciennes sauvegardes (garde les 5 plus r√©centes)
	@echo "$(YELLOW)üßπ Nettoyage des anciennes sauvegardes...$(NC)"
	@if [ -d "$(PROJECT_ROOT)/backups" ]; then \
		cd $(PROJECT_ROOT)/backups && \
		ls -t | grep design_backup | tail -n +6 | xargs -r rm -rf && \
		echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"; \
	else \
		echo "$(RED)‚ùå Dossier de sauvegarde non trouv√©$(NC)"; \
	fi

design-quick: ## D√©ploiement rapide sans confirmation
	@echo "$(YELLOW)‚ö° D√©ploiement rapide des patches...$(NC)"
	@cd $(SCRIPTS_DIR) && python3 apply_design_patches.py
	@echo "$(GREEN)‚úÖ D√©ploiement rapide termin√©$(NC)"

design-dev: ## Mode d√©veloppement avec rechargement automatique
	@echo "$(YELLOW)üîß Mode d√©veloppement activ√©...$(NC)"
	@echo "Surveillance des changements dans $(SCRIPTS_DIR)/design_patches.json"
	@while true; do \
		inotifywait -e modify $(SCRIPTS_DIR)/design_patches.json 2>/dev/null && \
		echo "$(YELLOW)üîÑ Changement d√©tect√©, red√©ploiement...$(NC)" && \
		make design-quick; \
	done || echo "$(RED)‚ùå inotifywait non disponible, installez inotify-tools$(NC)"

# Commandes Django int√©gr√©es
django-restart: ## Red√©marrer le serveur Django
	@echo "$(YELLOW)üîÑ Red√©marrage du serveur Django...$(NC)"
	@pkill -f "manage.py runserver" 2>/dev/null || true
	@sleep 2
	@cd $(PROJECT_ROOT) && nohup python manage.py runserver > /dev/null 2>&1 &
	@echo "$(GREEN)‚úÖ Serveur Django red√©marr√©$(NC)"

django-collectstatic: ## Collecter les fichiers statiques
	@echo "$(YELLOW)üì¶ Collection des fichiers statiques...$(NC)"
	@cd $(PROJECT_ROOT) && python manage.py collectstatic --noinput
	@echo "$(GREEN)‚úÖ Fichiers statiques collect√©s$(NC)"

# Commandes pour les am√©liorations de carte
map-improvements: ## Appliquer automatiquement les am√©liorations de carte
	@echo "$(YELLOW)üó∫Ô∏è  Application des am√©liorations de carte...$(NC)"
	@cd $(SCRIPTS_DIR) && python3 auto_implement_map_improvements.py
	@echo "$(GREEN)‚úÖ Am√©liorations de carte appliqu√©es$(NC)"

map-backup: ## Cr√©er une sauvegarde avant les am√©liorations de carte
	@echo "$(YELLOW)üíæ Cr√©ation d'une sauvegarde pour les am√©liorations de carte...$(NC)"
	@cd $(PROJECT_ROOT) && python manage.py apply_map_improvements --backup-only
	@echo "$(GREEN)‚úÖ Sauvegarde cr√©√©e$(NC)"

map-test: ## Tester les am√©liorations de carte (dry-run)
	@echo "$(YELLOW)üß™ Test des am√©liorations de carte (dry-run)...$(NC)"
	@cd $(PROJECT_ROOT) && python manage.py apply_map_improvements --dry-run
	@echo "$(GREEN)‚úÖ Test termin√©$(NC)"

# Commandes combin√©es
full-deploy: design-backup design-deploy django-collectstatic django-restart ## D√©ploiement complet (sauvegarde + patches + static + restart)
	@echo "$(GREEN)üéâ D√©ploiement complet termin√© avec succ√®s!$(NC)"

complete-map-deploy: map-backup map-improvements django-collectstatic django-restart ## D√©ploiement complet des am√©liorations de carte
	@echo "$(GREEN)üó∫Ô∏è  D√©ploiement complet des am√©liorations de carte termin√©!$(NC)"

# Commandes de d√©veloppement
dev-setup: ## Configuration initiale pour le d√©veloppement
	@echo "$(YELLOW)‚öôÔ∏è  Configuration de l'environnement de d√©veloppement...$(NC)"
	@mkdir -p $(PROJECT_ROOT)/backups
	@chmod +x $(SCRIPTS_DIR)/auto_deploy.sh
	@echo "$(GREEN)‚úÖ Environnement configur√©$(NC)"

# Tests et validation
test-patches: ## Tester les patches sans les appliquer
	@echo "$(YELLOW)üß™ Test des patches de design...$(NC)"
	@cd $(SCRIPTS_DIR) && python3 -c "import apply_design_patches; print('‚úÖ Syntaxe Python valide')"
	@cd $(SCRIPTS_DIR) && python3 -c "import json; json.load(open('design_patches.json')); print('‚úÖ JSON valide')"
	@echo "$(GREEN)‚úÖ Tous les tests passent$(NC)"

# Informations syst√®me
info: ## Afficher les informations syst√®me
	@echo "$(YELLOW)‚ÑπÔ∏è  Informations syst√®me:$(NC)"
	@echo "Projet: $(PROJECT_ROOT)"
	@echo "Scripts: $(SCRIPTS_DIR)"
	@echo "Python: $$(python3 --version 2>/dev/null || echo 'Non install√©')"
	@echo "Bash: $$(bash --version | head -1)"
	@echo "Timestamp: $(TIMESTAMP)"